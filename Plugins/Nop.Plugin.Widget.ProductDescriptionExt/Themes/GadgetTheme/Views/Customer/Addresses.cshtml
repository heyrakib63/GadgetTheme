@model CustomerAddressListModel
@{
	Layout = "_ColumnsTwo";

	//title
	NopHtml.AddTitleParts(T("PageTitle.Account").Text);
	//page class
	NopHtml.AppendPageCssClassParts("html-account-page");
	NopHtml.AppendPageCssClassParts("html-address-list-page");
}
@section left
{
	@await Component.InvokeAsync(typeof(CustomerNavigationViewComponent), new { selectedTabId = CustomerNavigationEnum.Addresses })
}
<div class="page account-page address-list-page">
	<div class="page-title">
		<h1>@T("Account.MyAccount") - @T("Account.CustomerAddresses")</h1>
	</div>
	<div class="page-body">
		@await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.CustomerAddressesTop, additionalData = Model })
		@if (Model.Addresses.Count > 0)
		{
			var i = 0;
			var address = Model.Addresses[i];
			<div class="section address-item">
				@await Html.PartialAsync("_InlineAddressEdit", new CustomerAddressEditModel { Address = Model.Addresses[i] })
			</div>
			<script asp-location="Footer">
				function deletecustomeraddress(addressId) {
					if (confirm('@T("Common.AreYouSure")')) {
						var postData = {
							addressId: addressId
						};
						addAntiForgeryToken(postData);

						$.ajax({
							cache: false,
							type: "POST",
							url: "@Url.RouteUrl("CustomerAddressDelete")",
							data: postData,
							dataType: "json",
							success: function (data, textStatus, jqXHR) {
								location.href = data.redirect;
							},
							error: function (jqXHR, textStatus, errorThrown) {
								alert('Failed to delete');
							}
						});
					}
				}
			</script>
		}
		else
		{
			<div class="no-data">
				@T("Account.CustomerAddresses.NoAddresses")
			</div>
		}
		@await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.CustomerAddressesBottom, additionalData = Model })
	</div>
</div>